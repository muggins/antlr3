/** \file
 *  This OBJC source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g
 *     -                            On : 2012-05-27 18:23:22
 *     -           for the tree parser : PolyPrinterTreeParser
 *
 * Editing it, at least manually, is not wise.
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g 2012-05-27 18:23:22


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import <ST4/ST.h>
#import <ST4/STGroup.h>
#import "PolyPrinter.h"
/* ----------------------------------------- */


/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */

#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_8_in_poly43;
static const unsigned long long FOLLOW_8_in_poly43_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_poly_in_poly48;
static const unsigned long long FOLLOW_poly_in_poly48_data[] = { 0x0000000000000370LL};
static ANTLRBitSet *FOLLOW_poly_in_poly52;
static const unsigned long long FOLLOW_poly_in_poly52_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_MULT_in_poly74;
static const unsigned long long FOLLOW_MULT_in_poly74_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_poly_in_poly78;
static const unsigned long long FOLLOW_poly_in_poly78_data[] = { 0x0000000000000370LL};
static ANTLRBitSet *FOLLOW_poly_in_poly82;
static const unsigned long long FOLLOW_poly_in_poly82_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_9_in_poly104;
static const unsigned long long FOLLOW_9_in_poly104_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_poly_in_poly109;
static const unsigned long long FOLLOW_poly_in_poly109_data[] = { 0x0000000000000370LL};
static ANTLRBitSet *FOLLOW_poly_in_poly113;
static const unsigned long long FOLLOW_poly_in_poly113_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INT_in_poly134;
static const unsigned long long FOLLOW_INT_in_poly134_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_poly148;
static const unsigned long long FOLLOW_ID_in_poly148_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global globalAttributeScopeImplementation

#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation

#pragma mark Rule Return Scopes returnScopeImplementation
@implementation PolyPrinter_poly_return /* returnScopeImplementation */

/* ST returnScope.synthesize */
@synthesize st; /* start of synthesize -- OBJC-Line 1837 */
+ (PolyPrinter_poly_return *)newPolyPrinter_poly_return
{
return [[[PolyPrinter_poly_return alloc] init] retain];
}

- (id) init
{
self = [super init];
return self;
}


/* ST returnScope.methods */
- (id) getTemplate { return st; }
- (NSString *) description { return st!=nil?[st description]:nil; }

@end /* end of returnScope implementation */



@implementation PolyPrinter  // line 637

/* ObjC start of ruleAttributeScope */
#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ObjC end of ruleAttributeScope */
#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
/* ObjC start synthesize() */
/* ST genericParserImplementation.synthesize */
@synthesize group;

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_8_in_poly43 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly43_data Count:(NSUInteger)1] retain];
    FOLLOW_poly_in_poly48 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly48_data Count:(NSUInteger)1] retain];
    FOLLOW_poly_in_poly52 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly52_data Count:(NSUInteger)1] retain];
    FOLLOW_MULT_in_poly74 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_MULT_in_poly74_data Count:(NSUInteger)1] retain];
    FOLLOW_poly_in_poly78 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly78_data Count:(NSUInteger)1] retain];
    FOLLOW_poly_in_poly82 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly82_data Count:(NSUInteger)1] retain];
    FOLLOW_9_in_poly104 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_poly104_data Count:(NSUInteger)1] retain];
    FOLLOW_poly_in_poly109 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly109_data Count:(NSUInteger)1] retain];
    FOLLOW_poly_in_poly113 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly113_data Count:(NSUInteger)1] retain];
    FOLLOW_INT_in_poly134 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly134_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_poly148 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_poly148_data Count:(NSUInteger)1] retain];

    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"ID", @"INT", @"MULT", @"WS", @"'+'", @"'^'", nil] retain]];
    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g"];
}

+ (PolyPrinter *)newPolyPrinter:(id<TreeNodeStream>)aStream
{
    return [[PolyPrinter alloc] initWithStream:aStream];
}

- (id) initWithStream:(id<TreeNodeStream>)aStream
{
    self = [super initWithStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:1+1] retain]];
    if ( self != nil ) {
        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

/* ObjC start actions.(actionScope).methods */
/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* ST genericParser.methods */

- (STGroup *)getGroup
{
    return group;
}

- (void) setGroup:(STGroup *)aGroup
{
    group = aGroup;
}

/* ObjC end methods() */
/* ObjC start rules */
/*
 * $ANTLR start poly
 * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g:9:1: poly : ( ^( '+' a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a>+<b>\"| ^( MULT a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a><b>\"| ^( '^' a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a>^<b>\"| INT -> {%{$INT.text}}| ID -> {%{$ID.text}});
 */
- (PolyPrinter_poly_return *) poly
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    PolyPrinter_poly_return * retval = [PolyPrinter_poly_return newPolyPrinter_poly_return];
    [retval setStart:[input LT:1]];


    @try {
        /* ruleLabelDefs entry */
        CommonTree *INT1 = nil;
        CommonTree *ID2 = nil;

        PolyPrinter_poly_return * a = nil ;

        PolyPrinter_poly_return * b = nil ;



        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g:9:5: ( ^( '+' a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a>+<b>\"| ^( MULT a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a><b>\"| ^( '^' a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a>^<b>\"| INT -> {%{$INT.text}}| ID -> {%{$ID.text}}) //ruleblock
        NSInteger alt1=5;
        unichar charLA1 = [input LA:1];
        switch (charLA1) {
            case 8: ;
                {
                alt1=1;
                }
                break;
            case MULT: ;
                {
                alt1=2;
                }
                break;
            case 9: ;
                {
                alt1=3;
                }
                break;
            case INT: ;
                {
                alt1=4;
                }
                break;
            case ID: ;
                {
                alt1=5;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:1 state:0 stream:input];
            nvae.c = charLA1;
            @throw nvae;

        }

        switch (alt1) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g:9:7: ^( '+' a= poly b= poly ) // alt
                {


                [self match:input TokenType:8 Follow:FOLLOW_8_in_poly43]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_poly_in_poly48];
                    a = [self poly];

                    [self popFollow];


                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_poly_in_poly52];
                    b = [self poly];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 
                /* -------- ST start rewriteTemplate ------------ */
                // TEMPLATE REWRITE
                /* -------- ST start rewriteTemplateAlt ------------ *//* ST 9:29: -> template(a=$a.stb=$b.st) \"<a>+<b>\" */
                {
                retval.st = [[[ST newST:group template:@"<a>+<b>"] add:@"a" value:(a!=nil?a.st:nil)] add:@"b" value:(b!=nil?b.st:nil)] ;
                }
                /* -------- ST end rewriteTemplateAlt ------------ */
                /* -------- ST end rewriteTemplate ------------ */
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g:10:4: ^( MULT a= poly b= poly ) // alt
                {


                [self match:input TokenType:MULT Follow:FOLLOW_MULT_in_poly74]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_poly_in_poly78];
                    a = [self poly];

                    [self popFollow];


                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_poly_in_poly82];
                    b = [self poly];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 
                /* -------- ST start rewriteTemplate ------------ */
                // TEMPLATE REWRITE
                /* -------- ST start rewriteTemplateAlt ------------ *//* ST 10:26: -> template(a=$a.stb=$b.st) \"<a><b>\" */
                {
                retval.st = [[[ST newST:group template:@"<a><b>"] add:@"a" value:(a!=nil?a.st:nil)] add:@"b" value:(b!=nil?b.st:nil)] ;
                }
                /* -------- ST end rewriteTemplateAlt ------------ */
                /* -------- ST end rewriteTemplate ------------ */
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g:11:4: ^( '^' a= poly b= poly ) // alt
                {


                [self match:input TokenType:9 Follow:FOLLOW_9_in_poly104]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_poly_in_poly109];
                    a = [self poly];

                    [self popFollow];


                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_poly_in_poly113];
                    b = [self poly];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 
                /* -------- ST start rewriteTemplate ------------ */
                // TEMPLATE REWRITE
                /* -------- ST start rewriteTemplateAlt ------------ */
                /* ST 11:26: -> template(a=$a.stb=$b.st) \"<a>^<b>\" */
                {
                    retval.st = [[[ST newST:group template:@"<a>^<b>"] add:@"a" value:(a!=nil?a.st:nil)] add:@"b" value:(b!=nil?b.st:nil)] ;
                }
                /* -------- ST end rewriteTemplateAlt ------------ */
                /* -------- ST end rewriteTemplate ------------ */
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g:12:4: INT // alt
                {

                INT1=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly134]; 
                 
                /* -------- ST start rewriteTemplate ------------ */
                // TEMPLATE REWRITE
                /* -------- ST start rewriteTemplateAlt ------------ */
                /* ST 12:13: -> {%{$INT.text}} */
                {
                    retval.st = [ST newSTWithTemplate:(INT1!=nil?INT1.text:nil)]

                ;
                }
                /* -------- ST end rewriteTemplateAlt ------------ */
                /* -------- ST end rewriteTemplate ------------ */
                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g:13:4: ID // alt
                {

                ID2=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_poly148]; 
                 
                /* -------- ST start rewriteTemplate ------------ */
                // TEMPLATE REWRITE
                /* -------- ST start rewriteTemplateAlt ------------ */
                /* ST 13:12: -> {%{$ID.text}} */
                {
                    retval.st = [ST newSTWithTemplate:(ID2!=nil?ID2.text:nil)];
                }
                /* -------- ST end rewriteTemplateAlt ------------ */
                /* -------- ST end rewriteTemplate ------------ */
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end poly */
/* ObjC end rules */

@end /* end of PolyPrinter implementation line 692 */
