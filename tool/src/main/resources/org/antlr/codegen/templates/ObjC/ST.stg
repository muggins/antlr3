/*
 [The "BSD license"]
 Copyright (c) 2005-2006 Terence Parr
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/** Template subgroup to add template rewrite output
 *  If debugging, then you'll also get STDbg.stg loaded.
 */

@outputFile.imports() ::= <<
<@super.imports()>
import <ST4/ST4.h>;
import <ANTLR/ANTLR.h>;
>>

@returnScopeInterface.memVars() ::= <<
<@super.memVars()>
/* ST returnInterface.memVars */
ST *st;
>>

@returnScopeInterface.properties() ::= <<
<@super.properties()>
/* ST returnScope.properties */
@property (retain, getter=getST, setter=setST:) ST *st;
>>

@returnScopeInterface.methodsDecl() ::= <<
<@super.methodsDecl()>
/* ST AST returnScopeInterface.methodsDecl */
- (id) getTemplate;
- (NSString *) description;
>>

@returnScopeInterface() ::= <<
/* ST returnScopeInterface */
@interface <returnScopeInterface.name> : ReturnScope {
<returnScopeInterface.memVars()>
}
<returnScopeInterface.properties()>

<returnScopeInterface.methods()>
@end
>>

@returnScopeImplementation.synthesize() ::= <<
<@super.synthesize()>
/* ST returnScope.synthesize */
@synthesize st;
>>

@returnScopeImplementation.methods() ::= <<
<@super.methods()>
/* ST returnScope.methods */
- (id) getTemplate { return st; }
- (NSString *) description { return st!=nil?[st description]:nil; }
>>

@returnScopeImplementation() ::= <<
@implementation <returnScopeImplementation.name>
<returnScopeImplementation.synthesize()>

<returnScopeImplementation.methods()>
@end
>>

/** Add this to each rule's return value struct */
@returnScope.ruleReturnMembers() ::= <<
<@super.ruleReturnMembers()>
/* ST returnScope.ruleReturnMembers -- empty */
>>

@genericParserHeaderFile.memVars() ::= <<
<@super.memVars()>
/* ST genericParserHeaderFile.memVars -- empty now */
STGroup *group; /* ST -- really a part of STAttrMap */
>>

@genericParserHeaderFile.properties() ::= <<
<@super.properties()>
/* ST genericParser.properties */
@property (retain, getter=getGroup, setter=setGroup:) STGroup *group;
>>

@genericParserHeaderFile.methodsDecl() ::= <<
<@super.methodsDecl()>
/* ST genericParser.methodsDecl */
- init;
- (STGroup *) getGroup;
- (void) setGroup:(STGroup *)aGroup;
@end
>>

@genericParser.synthesize() ::= <<
<@super.synthesize()>
/* ST genericParserImplementation.synthesize */
@synthesize group;
>>

/* additional init code for ST support */
@genericParser.init() ::= <<
/* ST genericParser.init */
<@super.init()>
    group = STGroup.defaultGroup;
>>

@genericParser.methods() ::= <<
<@super.methods()>
/* ST genericParser.methods */

- (STGroup *)getGroup
{
    return group;
}

- (void) setGroup:(STGroup *)aGroup
{
    group = aGroup;
}

>>

@genericParser.members() ::= <<
/* ST genericParser.members */
<@super.members()>

- (STGroup *) getGroup
{
    return group;
}

- (void) setGroup:(STGroup *) aGroup
{
    self.group = aGroup;
}

>>

@STAttrMap() ::= <<
/* -------- ST start STAttrMap ------------ */
<@STAttrMap.interface()>
<@STAttrMap.implementation()>
/* -------- ST end STAttrMap ------------ */
>>

@STAttrMap.interface() ::= <<
/* -------- ST start STAttrMap.interface ------------ */
@interface STAttrMap : LinkedHashMap {
/*    <@STAttrMap.memVars()> */
    STGroup *group;
}

/*    <@STAttrMap.properties()> */
@property (retain, getter=getGroup, setter=setGroup:) STGroup *group;
/* <@STAttrMap.methodsDecl()> */
- (id) init;
- (STAttrMap *) put:(NSString *)attrName value:(id)value;
- (STAttrMap *) putWithInt:(NSString *)attrName value:(NSInteger)value;
- (void) setGroup:(STGroup *)aGroup;
- (STGroup *) getGroup;
@end
/* -------- ST end STAttrMap.interface ------------ */
>>

@STAttrMap.implementation() ::= <<
/* -------- ST start STAttrMap.implementation ------------ */
/** allows convenient multi-value initialization:
 *  "new STAttrMap().put(...).put(...)"
 */
@implementation STAttrMap
@synthesize group;

<@STAttrMap.methods()>
@end
/* -------- ST end STAttrMap.implementation ------------ */
>>

@STAttrMap.memVars() ::= <<
/* -------- ST start STAttrMap.memVars ------------ */
    STGroup *group;
/* -------- ST end STAttrMap.memVars ------------ */
>>

@STAttrMap.properties() ::= <<
/* -------- ST start STAttrMap.properties ------------ */
@property (retain, getter=getGroup, setter=setGroup:) STGroup *group;
/* -------- ST end STAttrMap.properties ------------ */
>>

@STAttrMap.methodsDecl() ::= <<
/* -------- ST start STAttrMap.methodsDecl ------------ */
- (id) init;
- (STAttrMap *) put:(NSString *)attrName value:(id)value;
- (STAttrMap *) putWithInt:(NSString *)attrName value:(NSInteger)value;
- (void) setGroup:(STGroup *)aGroup;
- (STGroup *) getGroup;
/* -------- ST end STAttrMap.methodsDecl ------------ */
>>

@STAttrMap.methods() ::= <<
/* -------- ST start STAttrMap.methods ------------ */
- (id) init
{
    self = [super initWithLen:16];
    if ( self != nil ) {
        group = [STGroup newSTGroup:"<name>Templates"];
    }
    return self;
}

- (STAttrMap *) put:(NSString *)aAttrName value:(id)aValue
{
    [super put:aAttrName value:aValue];
    return self;
}

- (STAttrMap *) putWithInt:(NSString *)aAttrName forKey:(NSInteger)aValue
{
    [super put:aAttrName value:[ACNumber numberWithInteger:aValue]];
    return self;
}
- (void) setGroup:(STGroup *)aGroup
{
    group = aGroup;
}

- (STGroup *)getGroup
{
    return group;
}
/* -------- ST end STAttrMap.methods ------------ */
>>

/** x+=rule when output=template */
ruleRefAndListLabel(rule,label,elementIndex,args,scope) ::= <<
/* ST ruleRefAndListLable */
<ruleRef(...)>
<listLabel(elem=[label getTemplate,...]>
>>

rewriteTemplate(alts) ::= <<
/* -------- ST start rewriteTemplate ------------ */
<if(backtracking)>
if ( <actions.(actionScope).synpredgate> ) {
    <alts:rewriteTemplateAlt(); separator="else ">
    <if(rewriteMode)><replaceTextInLine()><endif>
}
<else>
<alts:rewriteTemplateAlt(alts); separator="else ">
<if(rewriteMode)><replaceTextInLine()><endif>
<endif>
/* -------- ST end rewriteTemplate ------------ */
>>

replaceTextInLine() ::= <<
/* -------- ST start replaceTextInLine ------------ */
<if(TREE_PARSER)>
[[(TokenRewriteStream *)input getTokenStream]
    replaceFromIndex:[[input getTreeAdaptor] getTokenStartIndex:retval.start]
             ToIndex:[[input getTreeAdaptor] getTokenStopIndex:retval.start]
                Text:retval.st];
<else>
[(TokenRewriteStream *)input)
        replaceFromIndex:[((CommonToken *)retval.start) getTokenIndex]
                 ToIndex:[[input LT:-1] getTokenIndex]
                    Text:retval.st];
<endif>
/* -------- ST end replaceTextInLine ------------ */
>>

rewriteTemplateAlt(alt) ::= <%
<! /* -------- ST start rewriteTemplateAlt ------------ */<\n> !>
/* ST <alt.description> */<\n>
<if(alt.pred)>
if (<alt.pred>) {<\n>
    retval.st = <alt.alt>;<\n>
}<\n>
<else>
{<\n>
    retval.st = <alt.alt>;<\n>
}<\n>
<endif>
<! /* -------- ST end rewriteTemplateAlt ------------ */<\n> !>
%>

rewriteEmptyTemplate(alts) ::= <%
nil;
%>

/** Invoke a template with a set of attribute name/value pairs.
 *  Set the value of the rule's template *after* having set
 *  the attributes because the rule's template might be used as
 *  an attribute to build a bigger template; you get a self-embedded
 *  template.
 */
rewriteExternalTemplate(name,args) ::= <%
<! /* -------- ST start rewriteExternalTemplate ------------ */'\n' !>
<if(args)><args:{a | [}><endif>
[group getInstanceOf:@"<name>"
<if(args)>] <args:{a | add:@"<a.name>" value:<a.value>] }><else>]<endif>
<! /* -------- ST end rewriteExternalTemplate ------------ */'\n' !>
%>

/** expr is a string expression that says what template to load */
rewriteIndirectTemplate(expr,args) ::= <%
<! /* -------- ST start rewriteIndirectTemplate ------------ */'\n' !>
<if(args)> <args:{a | [}><endif>
[group getInstanceOf:<expr>
<if(args)>] <args:{a | add:@"<a.name>" value:<a.value>] }><else>]<endif>
<! /* -------- ST end rewriteIndirectTemplate ------------ */'\n' !>
%>

/** Invoke an inline template with a set of attribute name/value pairs */
rewriteInlineTemplate(args, template) ::= <%
<! /* -------- ST start rewriteInlineTemplate ------------ */ !>
<if(args)><args:{a | [}><endif>
[ST newST:group template:@"<template>"
<if(args)>] <args:{a | add:@"<a.name>" value:<a.value>] }><else>]<endif>
<! /* -------- ST end rewriteInlineTemplate ------------ */ !>
%>

/** plain -> {foo} action */
rewriteAction(action) ::= <%
<! /* -------- ST start rewriteAction ------------ */ !>
<action>
<! /* -------- ST end rewriteAction ------------ */ !>
%>

/** An action has %st.attrName=expr; or %{st}.attrName=expr; */
actionSetAttribute(st,attrName,expr) ::= <%
<! /* -------- ST start actionSetAttribute ------------ */ !>
[<st> add:@"<attrName>" value:<expr>];<\n>
<![<st> setAttribute:<expr> name:@"<attrName>"];!>
<! /* -------- ST end actionSetAttribute ------------ */ !>
%>

/** Translate %{stringExpr} */
actionStringConstructor(stringExpr) ::= <%
<! /* -------- ST start actionStringConstructor ------------ */ !>
[ST newSTWithTemplate:<stringExpr>]
<! /* -------- ST end actionStringConstructor ------------ */ !>
%>
